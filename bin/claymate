#! /usr/bin/env node
// -*- js -*-

"use strict";

// Grab claymate library.
var Claymate = require('../lib/claymate.js'),
	JSONConfig = Claymate.getJSONConfig();

var usage =
"$0 [subcommand] [arguments]\n\
\n\
Use one of the following subcommands:\n\
  build - Concatenate and minify the core gumby scripts.\n\
  install - Creates a scaffold for your application with the reccomended setup.\n\
\n\
The options below will have which subcommand(s) they apply to in brackets\n\
before the description.\n\
";

// Set up argument parsing
var argv = require('optimist')
	// Usage information
	.usage(usage)

	// Options specific to [build]
	.describe('modules', '[build] Which modules to include in the build, comma separated. If omitted, defaults to all modules.')
	.alias('modules', 'm')

	.describe('addons', '[build] A comma separated list of paths to additional non-core gumby module files.')
	.alias('addons', 'add-ons')
	.alias('addons', 'a')

	.describe('files', '[build] A comma separated list of paths to additional non-module files.')
	.alias('files', 'f')

	.describe('buildSourceMap', '[build] Boolean flag, pass it to build the sourcemap.')
	.boolean('buildSourceMap')
	.alias('buildSourceMap', 's')

	.describe('outPath', '[build] Where to write the minified and sourcemap files. If omitted, defaults to current directory.')
	.alias('outPath', 'o')

	.describe('gumbyPath', '[build] Which path to look for gumby in.')
	.alias('gumbyPath', 'g')

	.describe('edge', '[install] Use the latest development version of gumby instead of the current release.')
	.boolean('edge')
	.alias('edge', 'e')

	// Generic
	.describe('quiet', '[build,install] Supresses non-error messages.')
	.boolean('quiet')
	.alias('quiet', 'q')

	// Require a subcommand at least
	.demand(1)

	// That's it!
	.wrap(80)
	.argv;

// Handle the subcommands
switch (argv._[0]) {
	case 'build':

		var buildOpts = {
			gumbyPath: getArg('gumbyPath', 'build'),
			outPath: getArg('outPath', 'build'),
			modules: getArg('modules', 'build', 'array'),
			addons: getArg('addons', 'build', 'array'),
			files: getArg('files', 'build', 'array'),
			buildSourceMap: getArg('buildSourceMap', 'build'),
			quiet: getArg('quiet', 'build')
		};

		Claymate.build(buildOpts);

		break;

	case 'install':

		var installOpts = {
			edge: getArg('edge', 'install'),
			quiet: getArg('quiet', 'install')
		};

		Claymate.install(installOpts);

		break;

}

/**
 * Grabs value from cli argument, then json config, then null
 * @param  {String} arg Which argument to retrieve
 * @return {mixed} The value
 */
function getArg(arg, subcommand, type) {

	if (argv[arg]) {
		return (type === 'array') ? argv[arg].split(',') : argv[arg];
	} else if (typeof JSONConfig[arg] !== 'undefined') {
		return JSONConfig[arg];
	} else if (
		typeof JSONConfig[subcommand] !== 'undefined' &&
		typeof JSONConfig[subcommand][arg] !== 'undefined'
	) {
		return JSONConfig[subcommand][arg];
	} else {
		return null;
	}

}
